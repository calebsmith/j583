###Django Data Importing

![](images/image1.png)

@@

###Make better models

We still need a little more data about the class and to add the Students model.

@@

###Enter Env and Start Server

You should know this command by now.

@@

###Before Changing Models

```
python manage.py makemigrations roster
```

@@

###Students model

```python
class Student(models.Model):
    name = models.CharField(unique=True, max_length=50)
    pid = models.CharField(unique=True, max_length=12)

    # Add null=True here
    grade = models.IntegerField(max_length=3, null=True)

    class Meta(object):
        ordering = ('pid', 'name')

    def __unicode__(self):
        return u'%s %s' % (self.name, self.pid)
```

@@

###Course Model

```python
class Course(models.Model):
    name = models.CharField(unique=True, max_length=50)

    # Add the following field
    callnumber = models.CharField(unique=False, max_length=4)

    instructor = models.CharField(max_length=50)
    description = models.CharField(max_length=200, default='')
    term = models.CharField(max_length=50)
    students = models.ManyToManyField('Student')
    date = models.DateField(default=timezone.now)

    class Meta(object):
        verbose_name_plural = 'Courses'
        ordering = ('-date', 'name')

    # Change __unicode__
    def __unicode__(self):
        return u'%s | %s' % (self.callnumber, self.name)

    def save(self, *args, **kwargs):
        self.name = self.name.upper()
        super(Course, self).save(*args, **kwargs)
```

@@

###Migrate

```
python manage.py makemigrations
python manage.py migrate
```

@@

###JSON

JavaScript Object Notation

A simple structured data format.

Similar in concept to XML and used for similar purposes

Lighter and Smaller than XML\* (sometimes)

@@

###JSON

![](images/image6.png)

@@

###Create a JSON file

* First, we need some data.

* Curl is used for grabbing a file via HTTP

* Save the output to a file called data_students.json

Curl URL > filename

```
curl calebsmith.github.io/j583/class10/examples/data_class.json > data_class.json
```

@@

###Import JSON

![](images/image8.png)

@@

###Letâ€™s get BIG JSON

data_students.json

Curl URL > filename

```
curl calebsmith.github.io/j583/class10/examples/data_students.json > data_students.json
```

@@

###Load the JSON file you just saved

![](images/image10.png)

@@

###What?

Bad data or bad model?

@@

###Fix the model

* Make name use unique=False

```python
class Student(models.Model):
    name = models.CharField(unique=False, max_length=50)
    pid = models.CharField(unique=True, max_length=12)
    grade = models.IntegerField(max_length=3, null=True)

    class Meta(object):
        ordering = ('pid', 'name')

    def __unicode__(self):
        return u'%s %s' % (self.name, self.pid)
```

@@

###When Changing Models

1. Run makemigrations on app before changing models (might do nothing)

1. Change model

1. Run makemigrations to pick up change

1. Run migrate

1. Re-import data files with loaddata

@@

###Migrate and Import (both)

```shell
python manage.py makemigrations roster
# Change roster/models.py
python manage.py makemigrations roster
python manage.py migrate
python manage.py loaddata data_class.json
python manage.py loaddata data_students.json
```


###If you are stuck

* To start over with no data:

```
rm newschool.db
python manage.py migrate
python manage.py loaddata data_class.json
python manage.py loaddata data_students.json
```


* If migrate doesn't work:

```
cd roster
rm -rf migrations
cd ..
rm newschool.db
python manage.py migrate
python manage.py loaddata data_class.json
python manage.py loaddata data_students.json

```

@@

###Oops, we left out the grades

Download an updated JSON file and replace the exsisting data with the new data.

@@

###In Case you need help

```
curl http://calebsmith.github.io/j583/class10/examples/data_students_withgrade.json > data_students_withgrade.json
python manage.py loaddata data_students_withgrade.json
```

@@

###Python Shell Data Magic

```
from roster.models import Student, Course

anna_students = Student.objects.filter(name__istartswith="anna")
courses = Course.objects.filter(name__istartswith="Intr")
course = courses[0]
print course
```

