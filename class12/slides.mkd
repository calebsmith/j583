###Django Templates and Views

![](images/image1.png)

@@

###Previously on Lost

You had a view of student and course that gave you a random student record rather than one based on the URL

We should find a way to fix this.

Let me show you how.

@@

###Remember

Request:

* urls.py (Root, than per app as defined in root urls.py)
* views.py (as referenced by urls.py)
* template.html (as referenced by views.py)
<br/>

Trace everything backwards and make sure changes are correct on all three files.

@@

###App urls.py

Need to turn on /student/123 and the same for courses.

```
# roster/urls.py
from django.conf.urls import patterns, url

from roster import views

urlpatterns = patterns('',
	url(r'^$', views.home, name='roster_home'),
	# TODO url(r'^course/$', views.courseList, name='roster_course_list'),
	# TODO url(r'^student/$', views.studentList, name='roster_student_list'),
	url(r'^course/(?P<pk>\d+)$', views.course, name='roster_course'),
	url(r'^student/(?P<pk>\d+)$', views.student, name='roster_student'),
)
```

@@

###App views.py

```python
# roster/views.py
from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

from roster.models import Course, Student

def home(request):
    context = {
        'student_count': Student.objects.count(),
        'course_count': Course.objects.count(),
    }
    return render(request, 'roster/home.html', context)

def course(request, pk):
    course = get_object_or_404(Course, id=pk)
    return render(request, 'roster/course.html', {'course': course})

def student(request, pk):
    student = get_object_or_404(Student, id=pk)
    return render(request, 'roster/student.html', {'student': student})
```

@@

###Test it out!

@@

###Adding remaining views

@@

###Update home.html links

![](images/image12.png)

* N.B. - {% load url from future %} no longer needed

@@

###Three files

What are the three files when editing making a new page?

1. urls.py

1. views.py

1. template_name.html

@@

###urls.py (route to new views)

* Uncomment lines for courseList and studentList

```
urlpatterns = patterns('',
	url(r'^$', views.home, name='roster_home'),
	url(r'^course/$', views.courseList, name='roster_course_list'),
	url(r'^student/$', views.studentList, name='roster_student_list'),
	url(r'^course/(?P<pk>\d+)$', views.course, name='roster_course'),
	url(r'^student/(?P<pk>\d+)$', views.student, name='roster_student'),
)
```

@@

###views.py

```
# add to roster/views.py

def courseList(request):
    course_list = Course.objects.all()
    return render(request, 'roster/course_list.html', {'courses': course_list})

def studentList(request):
    student_list = Student.objects.all()
    return render(request, 'roster/student_list.html', {'students': student_list})
```

@@

###List Templates

```
{# roster/course_list.html #}
{% extends "base.html" %}

{% block content %}
    <h2>All Classes</h2>
    <ul>
        {% for course in courses %}
            <li><a href="{% url 'roster_course' course.id %}">{{ course.name }}</a> | {{ course.callnumber }}</li>
        {% endfor %}
    </ul>
{% endblock %}
```

```
{# roster/student_list.html #}
{% extends "base.html" %}

{% block content %}
    <h2>All Students</h2>
    <ul>
        {% for student in students %}
            <li><a href="{% url 'roster_student' student.id %}">{{ student.name }}</a> | {{ student.grade }}</li>
        {% endfor %}
    </ul>
{% endblock %}
```

@@

###Test it

@@

###What about 5000 students?

* Reference documentation

[Django Pagination](https://docs.djangoproject.com/en/dev/topics/pagination/)

@@


###Pagination in views.py

```
def studentList(request):
    student_list = Student.objects.all()
    paginator = Paginator(student_list, 25)
    page = request.GET.get('page')
    try:
        students = paginator.page(page)
    except PageNotanInteger:
        students = paginator.page(1)
    except EmptyPage:
        students = paginator.page(paginator.num_pages)
    return render(request, 'roster/student_list.html', {'students': students})
```

@@

###Pagination for courses

* Just change the model and variable names

```
def courseList(request):
    course_list = Course.objects.all()
    paginator = Paginator(course_list, 25)
    page = request.GET.get('page')
    try:
        courses = paginator.page(page)
    except PageNotanInteger:
        courses = paginator.page(1)
    except EmptyPage:
        courses = paginator.page(paginator.num_pages)
    return render(request, 'roster/course_list.html', {'courses': courses})
```

@@

###Pagination in templates

```
{# roster/course_list.html #}
{% extends "base.html" %}

{% block content %}
    <h2>All Classes</h2>
    <ul>
        {% for course in courses %}
            <li><a href="{{ course.id }}">{{ course.name }}</a> | {{ course.callnumber }}</li>
        {% endfor %}
    </ul>

    {# This pagination div part is new #}

    <div class="pagination">
        <span class="step-links">
            {% if courses.has_previous %}
                <a href="?page={{ courses.previous_page_number }}">previous</a>
            {% endif %}
            <span class="current">
                Page {{ courses.number }} of {{ courses.paginator.num_pages }}
            </span>
            {% if courses.has_next %}
                <a href="?page={{ courses.next_page_number }}">next</a>
            {% endif %}
        </span>
    </div>
{% endblock %}
```


```
{# roster/student_list.html #}
{% extends "base.html" %}

{% block content %}
    <h2>All Classes</h2>
    <ul>
        {% for student in students %}
            <li><a href="{{ student.id }}">{{ student.name }}</a> | {{ student.callnumber }}</li>
        {% endfor %}
    </ul>

    {# This pagination div part is new #}

    <div class="pagination">
        <span class="step-links">
            {% if students.has_previous %}
                <a href="?page={{ students.previous_page_number }}">previous</a>
            {% endif %}
            <span class="current">
                Page {{ students.number }} of {{ students.paginator.num_pages }}
            </span>
            {% if students.has_next %}
                <a href="?page={{ students.next_page_number }}">next</a>
            {% endif %}
        </span>
    </div>
{% endblock %}
```

@@

###Sweet Style

@@

###Download Bootstrap

```
cd newschool/static
curl https://github.com/twbs/bootstrap/releases/download/v3.3.2/bootstrap-3.3.2-dist.zip > bootstrap.zip
```

@@

###Unzip and Copy Content into static

```
unzip bootstrap.zip
mv bootstrap/* ../
```

@@

###Always clean up after yourself

```
rmdir bootstrap
rm bootstrap.zip
```

@@

###Directory Structure and files

![](images/image8.png)

* N.B. - "static" **not** "static_media" as in the image

@@

###Django Static Server

In production, you would serve static files with Apache or a CDN which would be faster

Django is a dyamic server so it is slower but will work in our case (and for development)

http://localhost:8000/static/css/bootstrap.css

* Notice the /static/ comes from the settings.py STATIC_URL

@@

###Collect Static Files

For when you need to get all of your static files in one place to put them on a server:

![](images/image9.png)


![](images/image10.png)

* N.B. - Ours will be in /public/static per STATIC_ROOT

@@

###Add bootstrap to base.html

```
<!-- Ignore this line - Needed to get proper formatting --

{% load static from staticfiles %}
<!DOCTYPE html>

<html lang="en">
    <head>
        <title>{% block title %}New School Project{% endblock %}</title>
        <link href="{% static 'css/bootstrap.min.css' %}">
    </head>

    <body>
        <div class="container">
            {% block content %}{% endblock %}
        </div>
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script src="{% static 'js/bootstrap.min.js' %}"></script>
    </body>
</html>
```
