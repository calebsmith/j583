####Python Part III

Functions, Imports, Dictionaries

@@

###Before We Begin

* Install Xcode (Mac Only)

@@

###Functions

* A named unit of code that performs a specific task

* To use a function, you "call" it

* You've already used the int and print functions

```python
    a = '3'
    b = int(a)
    print(b)
```

@@

###Function arguments

* "arguments" (also called "parameters") are values passed to the function

* A function can take any number of arguments including 0

* A function returns a value (but value can be None)

```python
    a = '3'
    result = int(a)
```

@@

####Function definition

* Define your own functions with `def`

```python
# A naive implementation
def dog_years(human_years):
    return human_years * 7
```

@@

####Function definition Continued

```python
# A more realistic implementation
def dog_years(human_years):
    if human_years <= 2:
        return human_years * 10.5
    else:
        return ((human_years - 2) * 4) + 21
```

@@

####Function arguments

```python
import math

# (Pi * r ** 2) * height
def volume_cylinder(r, h):
    return math.pi * radius ** 2 * height

r = 5
h = 10
vol = volume_cylinder(r, h)
```

@@

####Functions with no return

```python

def print_greeting(name):
    print 'Hi {0}'.format(name)
```

* Returns None
@@


####Scope

The **scope** of a variable is the area of code in which a variable is still valid and can be used.

Variables defined within a function can not be used elsewhere.

```python
from __future__ import division


def average(numbers):
    # Can use "numbers" here
    return sum(numbers) / len(numbers)

avg = average([10, 15, 20, 25])
# Cannot reference "numbers" here
```

@@

####Function Call Stack

* Function calls **stack** on top of each other

```python

def f(x):
    return x + 5

def g(x):
    return f(x) + 4

def h(x):
    return g(f(x))

print h(4)
#18
```
@@

###Import statements

The **import** statement allows us to use Python code that is defined in one file in a different file, or inside of the shell.

The **from** keyword allows us to only import parts of a Python file

```python
# In knights.py
def shrubbery():
    print "I am a shrubber"

def ni(number):
    print "Ni!" * 3
```


```python
# Run a Python shell in the same directory as knights.py and enter the following
import knights

knights.shrubbery()
knights.ni()

# or
from knights import shrubbery, ni
shrubbery()
ni()
```
* Also works for a file in the same directory
@@

####Wild-card Form Imports

* This is when you `from modulename import *`

```
LUKE: Is from module import * better than explicit imports?
YODA: No, not better. Quicker, easier, more seductive.
LUKE: But how will I know why explicit imports are better than the wild-card form?
YODA: Know you will when your code you try to read six months from now.
```

* Imports everything, and everything it imports

@@

###Exercise

* Create a Python file and define some functions in it.
* Create another Python file that imports those functions and uses them.

@@

###Dictionaries

A **dictionary** (sometimes called a "hashmap") is a collection of key/value pairs, defined with `{}`

```python
menu_categories = {
    'food': 'stuff you eat',
    'beverage': 'stuff you drink',
}
```
@@

###Indexing on Dictionaries

* Dictionaries represent a group of mappings

* We can also index on dictionaries.

* The most common indexes are strings

```python
menu = {
    'tofu': 4,
}

tofu_cost = menu['tofu']
# the tofu_cost variable is now equal to 4.
```


* Indexing on a key that doesn't exist results in a KeyError

* If you aren't certain a key is present, you can use the 'get' method

```python
menu.get('tofu', default_value)
```

* If key isn't present, returns the default value provided, otherwise None
@@

###Dictionary Methods

Some of the most essential methods are:

* keys
* values
* items

```python
menu = {
    'tofu': 4,
    'pizza': 8,
    'baguette': 3,
}

>>> print menu.get('pizza')
8
>>> print menu.get('donuts', 5)
5
>>> print menu.keys()
['tofu', 'pizza', 'baguette']
>>> print menu.values()
[4, 8, 3]
>>> print menu.items()
[('tofu', 4), ('pizza', 8), ('baguette', 3)]
```

@@@

###The in operator

* The `in` operator is used to determine if an element is in a given collection

* For dictionaries, the keys are searched for the element.

```python
>>> color = (255, 255, 0)
>>> print(1 in color)
False

>>> menu = {'tofu': 4}
>>> print('tofu' in menu)
True
```
@@@
