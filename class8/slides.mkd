###Intro to Django Part 2

@@

###Test It

```shell
workon newschool
cd ~/Projects/newschool
python manage.py runserver

```

Visit - http://localhost:8000/hello-world
@@

### Making Views and Templates

YEA!!!!!! It gets much easier from here!


@@

###Templates

Lets make a folder to hold our templates

```shell
# cd to your newschool project folder

cd ~/Projects/newschool
mkdir newschool/templates
```

@@

###Create template file

```shell
touch newschool/templates/base.html
```
Edit the file

![](images/image33.png)

@@

###View

Edit the rosters/view.py

![](images/image34.png)

@@

###Restart Server

* Open New Terminal Tab

```shell
cd ~/Projects/newschool
workon newschool
python manage.py runserver
```

* Refresh browser

What? Of course it does, I just made it!

![](images/image35.png)

@@

###TEMPLATE_DIRS

* Open settings.py and add the template dir

* Tells Django where the templates live

```python
TEMPLATE_DIRS = (
    os.path.join(PROJECT_DIR, 'templates'),
)
```


Refresh and See!

![](images/image37.png)

@@

###Something Dynamic

Edit the Template to add a tag.

![](images/image38.png)

@@

### Create a Context

Context is a term used to explain the usage of data

![](images/image39.png)

@@

###Template Filters and Tags

Templates can also provide ways to change how and when the variables are displayed.

```
Conditionals: {% if number > 5 %} ... {% else %} ... {% endif %}

Loops:
{% for element in iterable %}
    {{ element }}
{% endfor %}

Text Filters: {{ message|lower }}, {{ my_number|floatformate:3 }}
```

@@

###Make uppercase and show date.

Filter and Tag

![](images/image40.png)


Refresh Browser

![](images/image41.png)

@@

###Data?

That was simple dynamic HTML display
Now we need to work with some data.

@@

###Models

* Models describe our data

* Models map to SQL tables

* Each table has a name

* Column has a specific data type

* Django ORM (object-relational-mapper) hides us from real SQL.

* Models are important, think them through.

* Many ways to model every application

@@

### Model

Courses contains

* Title
* Course Number
* Instructor
* Description
* Term
* Many Students
* Name
* PID
* Email
* Photo
* Bio
* Current Grade
* Assignments (Many)
* Major
* New School App Data

@@

### First Model

Make your first model

(In rosters/models.py)

![](images/image42.png)

@@

###Admin

Create admin.py in the roster dir

Tell the admin about Course

![](images/image45.png)

@@

###Migrations

```shell
python manage.py makemigrations
python manage.py migrate
```

* You have no idea how much time this just saved you!

@@

###models.py

Improve model

![](images/image47.png)

@@

###admin.py

Improve Admin

![](images/image48.png)

@@

###Relations

https://docs.djangoproject.com/en/dev/ref/models/fields/

* Foreign Key - A unique identifier used to relate tables. Default in Django is the ID

* OneToOne - Similar in concept to Foreign Keys but reverse side returns as single object aswell

* ManyToMany - Relation of many FKs. Class has many students.

@@

###Expand the models

Edit model.py

![](images/image49.png)


More on models.py

![](images/image50.png)


Edit the admin.py file

![](images/image51.png)

@@

###Reading Assignment

[Django Girls Tutorial](http://tutorial.djangogirls.org/en/index.html)

* Read sections 13-14

